@using BlazingBlog.Application.Users.AddRoleToUser
@using BlazingBlog.Application.Users.RemoveRoleFromUser
@inject ISender Sender
@if (ShowModal)
{
    <div class="fixed inset-0 m-0 flex items-start justify-center bg-white bg-opacity-50">
        <div class="flex flex-col w-full max-w-xl gap-2 p-16 mt-24 rounded-md shadow-md bg-gray-700 text-gray-100">
            <h2 class="flex items-center gap-2 text-xl font-semibold leading-tight tracking-wide">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-6 h-6 fill-current shrink-0 dark:text-sky-600">
                    <path d="M451.671,348.569,408,267.945V184c0-83.813-68.187-152-152-152S104,100.187,104,184v83.945L60.329,348.568A24,24,0,0,0,81.432,384h86.944c-.241,2.636-.376,5.3-.376,8a88,88,0,0,0,176,0c0-2.7-.135-5.364-.376-8h86.944a24,24,0,0,0,21.1-35.431ZM312,392a56,56,0,1,1-111.418-8H311.418A55.85,55.85,0,0,1,312,392ZM94.863,352,136,276.055V184a120,120,0,0,1,240,0v92.055L417.137,352Z"></path>
                    <rect width="32" height="136" x="240" y="112"></rect>
                    <rect width="32" height="32" x="240" y="280"></rect>
                </svg>Change Roles for @UserName
            </h2>
            <p class="flex-1 dark:text-gray-600">
                <QuickGrid Items="Roles.AsQueryable()">
                    <PropertyColumn class="text-gray-100" Property="@(r => r)"></PropertyColumn>
                    <TemplateColumn>
                        <button title="Delete User Role" @onclick="() => RemoveRole(context)"
                                class="p-2 text-sm font-bold uppercase rounded text-sky-600"
                                hover: bg-blue-300>
                            ❌
                        </button>
                    </TemplateColumn>
                </QuickGrid>
            </p>
            <div class="flex mt-2">
                <input @bind="newRole" class="p-2 mr-2 w-64 rounded bg-gray-300 text-gray-700" placeholder="Add new role" />
                <button @onclick="AddRole" class="p-2 text-sm font-bold rounded text-sky-600 uppercase">Add Role</button>
            </div>
            <div class="flex flex-col justify-end gap-3 mt-6 sm:flex-row">
                <button @onclick="CloseModal" class="p-3 text-sm font-bold tracking-wide uppercase rounded text-gray-50 bg-sky-600">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool ShowModal { get; set; }
    [Parameter]
    public EventCallback<bool> ModalClosed { get; set; }
    [Parameter]
    public required string UserId { get; set; }
    [Parameter]
    public string? UserName { get; set; }
    private List<string> Roles { get; set; } = [];
    private string newRole = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        await LoadUserRoles();
    }
    private async Task AddRole()
    {
        if (!string.IsNullOrWhiteSpace(newRole))
        {
            await Sender.Send(new AddRoleToUserCommand { UserId = UserId, RoleName = newRole } );
            await LoadUserRoles();
            newRole = string.Empty;
        }
    }
    private async Task RemoveRole(string roleName)
    {
        await Sender.Send(new RemoveRoleFromUserCommand { UserId = UserId, RoleName = roleName });
        await LoadUserRoles();
    }
    private void CloseModal()
    {
        ShowModal = false;
        newRole = string.Empty;
        ModalClosed.InvokeAsync(ShowModal);
    }
    private async Task LoadUserRoles()
    {
        if (ShowModal && UserId is not null)
        {
            Roles = (await Sender.Send(new GetUserRolesQuery { UserId = UserId } )).Value ?? [];
        }
    }
}
