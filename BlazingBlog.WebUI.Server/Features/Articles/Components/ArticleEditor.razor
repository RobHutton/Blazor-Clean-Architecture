@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@inject ISender Sender
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>@PageTitle</PageTitle>
<h1 class="text-3xl font-extrabold text-gray-100">@PageTitle</h1>

@if (Article is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm FormName="ArticleEditorForm" Model="Article" OnValidSubmit="HandleSubmit" class="space-y-6 my-4">
        <input type="hidden" name="Article.Id" @bind-value="Article.Id" />
        <div>
            <label for="name" class="text-sm">Title</label>
            <InputText id="name" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 focus:border-blue-400 focus:border-blue-500" @bind-Value="Article.Title" />
        </div>
        <div>
            <label for="title" class="text-sm">Content</label>
            <InputTextArea id="title" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 focus:border-blue-400 focus:border-blue-500" @bind-Value="Article.Content" />
        </div>
        <div>
            <label for="date" class="text-sm">Publish Date</label>
            <InputDate id="date" class="w-full p-3 rounded bg-gray-800 border-gray-400 border-1 focus:border-blue-400 focus:border-blue-500" @bind-Value="Article.DatePublished" />
        </div>
        <div>
            <InputCheckbox id="published" class="w-4 h-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded mr-2 checked:bg-blue-400" @bind-Value="Article.IsPublished" />
            <label for="published" class="form-check-label">Is Published</label>
        </div>
        <button type="submit" class="w-full p-3 text-sm font-bold tracking-wide uppercase rounded text-gray-50 bg-sky-600">Submit</button>
    </EditForm>
    
    @if (isEditMode)
    {
        <form @onsubmit="DeleteArticle" @formname="ArticleDeleteForm" method="post" class="space-y-6 my-4">
            <h2 class="text-3xl font-extrabold text-gray-100">Danger Zone</h2>
            <button class="p-3 text-sm font-bold tracking-wide uppercase rounded text-gray-50 bg-red-600">Delete Article</button>
            <AntiforgeryToken />
        </form>
    }
}
<span class="text-danger">@errorMessage</span>

@code {
    private bool isEditMode => ArticleId is not null;
    private string errorMessage = string.Empty;
    private string PageTitle =>
        !string.IsNullOrEmpty(errorMessage) ? "Application Error" : (isEditMode ? "Edit Article" : "Create New Article");

    [SupplyParameterFromForm]
    ArticleModel? Article { get; set; }
    [Parameter]
    public int? ArticleId { get; set; }
    protected async override Task OnParametersSetAsync()
    {
        if (ArticleId is not null)
        {
            var result = await Sender.Send(new GetArticleByIdQuery { Id = (int)ArticleId });
            if (result.Success)
            {
                Article ??= result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            Article ??= new();
        }
    }
    async Task HandleSubmit()
    {
        if (isEditMode)
        {
            var command = Article.Adapt<UpdateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                Article = result.Value.Adapt<ArticleModel>();
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
        else
        {
            var command = Article.Adapt<CreateArticleCommand>();
            var result = await Sender.Send(command);
            if (result.Success)
            {
                NavigationManager.NavigateTo($"/article-editor/{result.Value.Id}");
            }
            else
            {
                SetErrorMessage(result.Error);
            }
        }
    }
    async Task DeleteArticle()
    {
        if (ArticleId is null)
        {
            return;
        }
        var command = new DeleteArticleCommand { Id = (int)ArticleId };
        var result = await Sender.Send(command);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/articles");
        }
        else
        {
            SetErrorMessage(result.Error);
        }
    }
    void SetErrorMessage(string? error)
    {
        errorMessage = error ?? string.Empty;
    }
}
